package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Pet;

public class PetManager {

	private Connection connection;

	private String URL = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTablePet = "CREATE TABLE Pet(p_id bigint GENERATED BY DEFAULT AS IDENTITY(start with 1), name varchar(30), species varchar(30))";

	private PreparedStatement addPetStmt;
	private PreparedStatement deleteAllPetsStmt;
	private PreparedStatement deletePetStmt;
	private PreparedStatement getAllPetsStmt;
	private PreparedStatement getPetByIdStmt;
	private PreparedStatement getPetByNameStmt;
	private PreparedStatement updatePetStmt;

	private Statement statement;
	private PreparedStatement dropTable;

	public PetManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Pet".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTablePet);

			addPetStmt = connection
					.prepareStatement("INSERT INTO Pet (name, species) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS); 
			deleteAllPetsStmt = connection
					.prepareStatement("DELETE FROM Pet");
			deletePetStmt = connection
					.prepareStatement("DELETE FROM Pet WHERE name=? AND species=?");
			getAllPetsStmt = connection
					.prepareStatement("SELECT p_id, name, species FROM Pet");
			getPetByNameStmt = connection
					.prepareStatement("SELECT p_id, name, species FROM Pet WHERE name=?");	
			getPetByIdStmt = connection
					.prepareStatement("SELECT p_id, name, species FROM Pet WHERE p_id=?");			
			updatePetStmt = connection
					.prepareStatement("UPDATE Pet SET name=?, species=? WHERE p_id=?");
			dropTable = connection.prepareStatement(
                    "DROP TABLE Pet");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearPets() {
		try {
			deleteAllPetsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public int deletePet(Pet pet) {
		int count = 0;
		try {
			deletePetStmt.setString(1, pet.getName());
			deletePetStmt.setString(2, pet.getSpecies());

			count = deletePetStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addPet(Pet pet) {
		int count = 0;
		try {
			addPetStmt.setString(1, pet.getName());
			addPetStmt.setString(2, pet.getSpecies());

			count = addPetStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addPetGetID(Pet pet) {
		int key = 0;
		try {
			addPetStmt.setString(1, pet.getName());
			addPetStmt.setString(2, pet.getSpecies());

			addPetStmt.executeUpdate();
			ResultSet rs = addPetStmt.getGeneratedKeys();
			if (rs.next()){
				key = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return key;
	}
	public int updatePet(int id, Pet pet) {
		int count = 0;
		try {
			updatePetStmt.setString(1, pet.getName());
			updatePetStmt.setString(2, pet.getSpecies());
			updatePetStmt.setInt(3, id);
			
			count = updatePetStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public List<Pet> getAllPets() {
		List<Pet> pets = new ArrayList<Pet>();

		try {
			ResultSet rs = getAllPetsStmt.executeQuery();

			while (rs.next()) {
				Pet p = new Pet();
				p.setId(rs.getInt("p_id"));
				p.setName(rs.getString("name"));
				p.setSpecies(rs.getString("species"));
				pets.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pets;
	}
	public List<Pet> getPetsByName(String name) {
		List<Pet> pets = new ArrayList<Pet>();

		try {
			getPetByNameStmt.setString(1, name);
			ResultSet rs = getPetByNameStmt.executeQuery();

			while (rs.next()) {
				Pet p = new Pet();
				p.setId(rs.getInt("p_id"));
				p.setName(rs.getString("name"));
				p.setSpecies(rs.getString("species"));
				pets.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pets;
	}
	 public Pet getPet(int id) {
		 Pet p = new Pet();
	        try {
	            getPetByIdStmt.setInt(1, id);
	            ResultSet rs = getPetByIdStmt.executeQuery();
	
	            while (rs.next()) {
	                p.setId(rs.getInt("p_id"));
	                p.setName(rs.getString("name"));
	                p.setSpecies(rs.getString("species"));
	                break;
	            }
	
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	
	        return p;
	   }
	 
	 public void dropTable() throws SQLException {
	        try {
	            connection = DriverManager.getConnection(URL);
	            statement = connection.createStatement();

	            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
	            boolean tableExists = false;

	            rs = connection.getMetaData().getTables(null, null, null, null);
	            tableExists = false;
	            while (rs.next()) {
	                if ("Pet".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
	                    tableExists = true;
	                    break;
	                }
	            }
	            if (tableExists)
	                dropTable.executeQuery();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
}
